// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CourseLevel {
  BASIC
  MEDIUM
  ADVANCED
}

model Course {
  id                     String             @id @default(uuid())
  name                   String

  description            String
  short_description      String

  location               String?
  instructors            String[]

  level                  CourseLevel

  is_free                Boolean
  price                  Decimal?
  number_of_payments     Int?

  is_published           Boolean 
  subscriptions_open     Boolean
  max_subscribers        Int?

  tags                   String[]

  created_at             DateTime           @default(now()) @db.Timestamptz(3)
  updated_at             DateTime           @updatedAt @db.Timestamptz(3)

  category_id            String
  category               CourseCategory @relation(fields: [category_id], references: [id])
  owner_id               String
  owner                  Physiotherapist    @relation(fields: [owner_id], references: [applicationUserId])
  subscribers            CourseFinalUser[]

  subscription_start_date DateTime @default(now()) @db.Timestamptz(3)
  subscription_end_date   DateTime @db.Timestamptz(3)
  sessions               CourseSession[]
}

model CourseCategory {
  id String @id @default(uuid())
  name String
  Course Course[]
}

model CourseSession {
  id         String   @id @default(uuid())
  start_time DateTime
  end_time   DateTime
  course     Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  course_id  String
}

model CourseFinalUser {
  course_id     String
  final_user_id String
  course        Course    @relation(fields: [course_id], references: [id])
  final_user    FinalUser @relation(fields: [final_user_id], references: [applicationUserId])
  created_at    DateTime  @default(now()) @db.Timestamptz(3)
  updated_at    DateTime  @updatedAt @db.Timestamptz(3)

  @@id([course_id, final_user_id])
}

enum Role {
  USER
  ADMIN
  PHYSIOTHERAPIST
}

model ApplicationUser {
  id                           String           @id @default(uuid())
  email                        String           @unique
  isEmailVerified              Boolean          @default(false)
  emailConfirmationToken       String?
  emailConfirmationTokenExpiry DateTime?
  passwordHash                 String           @default("")
  passwordResetToken           String?
  passwordResetTokenExpiry     DateTime?
  twoFactorCode                String?
  twoFactorExpiry              DateTime?
  twoFactorEnabled             Boolean          @default(false)
  firstName                    String
  middleName                   String?
  lastName                     String
  phoneNumber                  String?
  birthDate                    String?
  role                         Role             @default(USER)
  lastLogin                    DateTime?
  failedLoginAttempts          Int              @default(0)
  createdAt                    DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt                    DateTime         @updatedAt @db.Timestamptz(3)
  physiotherapistData          Physiotherapist?
  finalUserData                FinalUser?
}

model Physiotherapist {
  applicationUserId String          @id
  applicationUser   ApplicationUser @relation(fields: [applicationUserId], references: [id])

  specialization    String?
  publicPhoneNumber String?
  courses           Course[]
}

model FinalUser {
  applicationUserId String            @id
  applicationUser   ApplicationUser   @relation(fields: [applicationUserId], references: [id])
  courses           CourseFinalUser[]

  // TODO: Specify body measurements
  // bodyWeight                Decimal?
  // bodyHeight                Decimal?
  // bodyFatPercentage         Decimal?
  // bodyMassIndex             Decimal?
  // bodyWaterPercentage       Decimal?
}
