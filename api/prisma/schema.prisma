// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CourseLevel {
  BASIC
  MEDIUM
  ADVANCED
}

enum PaymentRecurrence {
  SINGLE
  PER_SESSION
  MONTHLY
  ANNUAL
}

model Course {
  id   String @id @default(uuid())
  name String

  description      String
  shortDescription String

  location    String?
  instructors String[]

  level CourseLevel

  price             Decimal
  paymentRecurrence PaymentRecurrence

  isPublished       Boolean
  subscriptionsOpen Boolean
  maxSubscribers    Int?

  imagePath String?

  tags String[]

  categoryId String
  category   CourseCategory @relation(fields: [categoryId], references: [id])

  ownerId String
  owner   Physiotherapist @relation(fields: [ownerId], references: [applicationUserId])

  subscriptionStartDate DateTime        @default(now()) @db.Timestamptz(3)
  subscriptionEndDate   DateTime        @db.Timestamptz(3)
  sessions              CourseSession[]
  subscriptions         Subscription[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model CourseCategory {
  id     String   @id @default(uuid())
  name   String
  Course Course[]
}

model CourseSession {
  id        String   @id @default(uuid())
  startTime DateTime
  endTime   DateTime
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
}

model Subscription {
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  patientId String
  patient   Patient @relation(fields: [patientId], references: [applicationUserId])

  isPending                  Boolean
  subscriptionRequestMessage String?

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  @@id([courseId, patientId])
}

enum Sex {
  MALE
  FEMALE
  OTHER
}

enum Role {
  USER
  ADMIN
  PHYSIOTHERAPIST
}

model ApplicationUser {
  id    String @id @default(uuid())
  email String @unique
  role  Role   @default(USER)

  isEmailVerified              Boolean   @default(false)
  emailConfirmationToken       String?
  emailConfirmationTokenExpiry DateTime?

  passwordHash             String    @default("")
  passwordResetToken       String?
  passwordResetTokenExpiry DateTime?

  twoFactorCode    String?
  twoFactorExpiry  DateTime?
  twoFactorEnabled Boolean   @default(false)

  firstName   String
  middleName  String?
  lastName    String
  phoneNumber String?
  birthDate   String?

  lastLogin           DateTime?
  failedLoginAttempts Int              @default(0)
  physiotherapist     Physiotherapist?
  patient             Patient?

  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt @db.Timestamptz(3)
  picturePath String?
}

model Physiotherapist {
  bio               String?
  specialization    String?
  publicPhoneNumber String?
  publicEmail       String?
  publicAddress     String?
  website           String?
  socialMediaLinks  String[] @default([])

  applicationUserId String          @id
  applicationUser   ApplicationUser @relation(fields: [applicationUserId], references: [id])
  courses           Course[]
}

enum ActivityLevel {
  LOW
  MEDIUM
  HIGH
}

enum MobilityLevel {
  LIMITED
  MODERATE
  FULL
}

model Patient {
  applicationUserId String          @id
  applicationUser   ApplicationUser @relation(fields: [applicationUserId], references: [id])
  subscriptions     Subscription[]

  sex                 Sex?
  height              Float?
  weight              Float?
  smoker              Boolean?
  alcoholUnits        Int?
  activityLevel       ActivityLevel?
  mobilityLevel       MobilityLevel?
  restingHeartRate    Int?
  bloodPressure       String?
  profession          String?
  sport               String?
  sportFrequency      Int?
  medications         String?
  allergies           String?
  otherPathologies    String?
  painZone            String?
  painIntensity       Int?
  painFrequency       String?
  painCharacteristics String?
  painModifiers       String?
  sleepHours          Int?
  perceivedStress     Int?

  lastMedicalCheckup DateTime?
  personalGoals      String?
  notes              String?
}
